import streamlit as st
from dotenv import load_dotenv
import pickle
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.llms import OpenAI
from langchain.chains.question_answering import load_qa_chain
from langchain.callbacks import get_openai_callback
import os
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationChain
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain.prompts import (
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
    ChatPromptTemplate,
    MessagesPlaceholder
)
from streamlit_chat import message  # Importez la fonction message
import toml
import docx2txt
from langchain.memory.chat_message_histories import StreamlitChatMessageHistory
from langchain.callbacks.base import BaseCallbackHandler
if 'previous_question' not in st.session_state:
    st.session_state.previous_question = []
st.markdown(
    """
    <style>

        .user-message {
            text-align: left;
            background-color: #E8F0FF;
            padding: 8px;
            border-radius: 15px 15px 15px 0;
            margin: 4px 0;
            margin-left: 10px;
            margin-right: -40px;
            color:black;
        }

        .assistant-message {
            text-align: left;
            background-color: #F0F0F0;
            padding: 8px;
            border-radius: 15px 15px 15px 0;
            margin: 4px 0;
            margin-left: -10px;
            margin-right: 10px;
            color:black;
        }

        .message-container {
            display: flex;
            align-items: center;
        }

        .message-avatar {
            font-size: 25px;
            margin-right: 20px;
            flex-shrink: 0; /* Emp√™cher l'avatar de r√©tr√©cir */
            display: inline-block;
            vertical-align: middle;
        }

        .message-content {
            flex-grow: 1; /* Permettre au message de prendre tout l'espace disponible */
            display: inline-block; /* Ajout de cette propri√©t√© */
}
        .message-container.user {
            justify-content: flex-end; /* Aligner √† gauche pour l'utilisateur */
        }

        .message-container.assistant {
            justify-content: flex-start; /* Aligner √† droite pour l'assistant */
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Sidebar contents
textcontainer = st.container()
with textcontainer:
    logo_path = "medi.png"
    logoo_path = "NOTEPRESENTATION.png"
    st.sidebar.image(logo_path,width=150)
   
    
st.sidebar.subheader("Suggestions:")
questions = [
        "Donnez-moi un r√©sum√© du rapport ",
        "Quelles sont les actions pr√©vues pour am√©liorer l'acc√®s √† l'√©ducation et aux services de sant√© dans le PLF 2025 ?",
        "Quels sont les d√©fis majeurs auxquels fait face l'√©laboration du PLF 2025 ?",
        "Quels sont les objectifs du gouvernement en mati√®re de d√©veloppement du dessalement de l‚Äôeau de mer ?",
        "Quels sont les principaux secteurs prioritaires dans le budget 2025 du Maroc ?"

    ]    
 
load_dotenv(st.secrets["OPENAI_API_KEY"])
conversation_history = StreamlitChatMessageHistory()

def main():
    conversation_history = StreamlitChatMessageHistory()  # Cr√©ez l'instance pour l'historique
    st.header("Rapport sur le Projet de Loi de Finances pour l‚Äôann√©e budg√©taire 2025.  üí¨")
    
    # Load the document
    docx = 'note pr√©sentation (2).docx'
    
    if docx is not None:
        text = docx2txt.process(docx)
        text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len
        )
        chunks = text_splitter.split_text(text=text)

        embeddings = OpenAIEmbeddings()
        VectorStore = FAISS.from_texts(chunks, embedding=embeddings)
        with open("aaa.pkl", "wb") as f:
            pickle.dump(VectorStore, f)

        st.markdown('<p style="margin-bottom: 0;"><h7><b>Posez vos questions ci-dessous:</b></h7></p>', unsafe_allow_html=True)

        query_input = st.text_input("")
        selected_questions = st.sidebar.radio("****Choisir :****", questions)
        
        # Initialize query
        query = ""
        
        if query_input and query_input not in st.session_state.previous_question:
            query = query_input
            st.session_state.previous_question.append(query_input)
        elif selected_questions:
            query = selected_questions
        
        if query:
            docs = VectorStore.similarity_search(query=query, k=3)

            llm = OpenAI(model="gpt-3.5-turbo-instruct")
            chain = load_qa_chain(llm=llm, chain_type="stuff")
            with get_openai_callback() as cb:
                response = chain.run(input_documents=docs, question=query)
                
                if "Donnez-moi un r√©sum√© du rapport" in query:
                    response = "Le Projet de Loi de Finances (PLF) 2025 du Maroc pr√©sente la r√©partition des d√©penses pr√©vues par minist√®re et institution, en mettant l'accent sur les secteurs prioritaires tels que l'√©ducation, la sant√©, et l'infrastructure. Les budgets les plus importants sont allou√©s au Minist√®re de l'√âducation Nationale (87,6 milliards de dirhams), au Minist√®re de la Sant√© (32,5 milliards), et au Minist√®re de l'√âconomie et des Finances (91,7 milliards). Des fonds sp√©ciaux sont √©galement pr√©vus pour le d√©veloppement r√©gional, la gestion des catastrophes, et la promotion de l'emploi. L'Administration de la D√©fense Nationale b√©n√©ficie d'un budget substantiel de 58,7 milliards de dirhams pour soutenir les Forces Arm√©es Royales et leurs op√©rations. Le projet refl√®te les priorit√©s du pays en mati√®re de d√©veloppement durable et d'am√©lioration des services publics."

                conversation_history.add_user_message(query)
                conversation_history.add_ai_message(response)

            formatted_messages = []
            for msg in conversation_history.messages:
                role = "user" if msg.type == "human" else "assistant"
                avatar = "üßë" if role == "user" else "ü§ñ"
                css_class = "user-message" if role == "user" else "assistant-message"
                
                message_div = f'<div class="{css_class}">{msg.content}</div>'
                avatar_div = f'<div class="avatar">{avatar}</div>'
                
                if role == "user":
                    formatted_message = f'<div class="message-container user"><div class="message-avatar">{avatar_div}</div><div class="message-content">{message_div}</div></div>'
                else:
                    formatted_message = f'<div class="message-container assistant"><div class="message-content">{message_div}</div><div class="message-avatar">{avatar_div}</div></div>'
                
                formatted_messages.append(formatted_message)

            messages_html = "\n".join(formatted_messages)
            st.markdown(messages_html, unsafe_allow_html=True)

if __name__ == '__main__':
    main()
